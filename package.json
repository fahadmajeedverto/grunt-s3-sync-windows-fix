{
  "name": "grunt-s3-sync",
  "description": "A streaming interface for uploading multiple files to S3",
  "version": "0.4.1",
  "homepage": "https://github.com/smallmultiples/grunt-s3-sync",
  "author": {
    "name": "Small Multiples",
    "email": "info@small.mu",
    "url": "http://small.mu"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/smallmultiples/grunt-s3-sync.git"
  },
  "bugs": {
    "url": "https://github.com/smallmultiples/grunt-s3-sync/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/smallmultiples/grunt-s3-sync/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.coffee",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "dependencies": {
    "s3-sync": "~0.3.0",
    "rimraf": "~2.2.2",
    "through": "~2.3.4",
    "async": "~0.2.9"
  },
  "devDependencies": {},
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin",
    "s3",
    "amazon",
    "aws"
  ],
  "readme": "# grunt-s3-sync\n\n> A streaming interface for uploading multiple files to S3\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-s3-sync --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-s3-sync');\n```\n\n## The \"s3-sync\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `s3-sync` to the data object passed into `grunt.initConfig()`.\n\n### Options\n\n#### options.key\nType: `String`\n\nYour AWS access key, **mandatory**.\n\n#### options.secret\nType: `String`\n\nYour AWS secret, **mandatory**.\n\n#### options.bucket\nType: `String`\n\nThe bucket to upload to, **mandatory**.\n\n#### options.concurrency\nType: `Number`\n\nThe maximum amount of files to upload concurrently.\n\n#### options.headers\nType: `Object`\n\nAdditional headers to include on each file.\n\n#### options.db\nType: `Function`\n\nA [level](http://github.com/level/level) database to use as a local cache\nfor file uploads. This way, you can minimize the frequency you have to\nhit S3 and speed up the whole process considerably.\n\nNeeds to be passed as a function that returns the db instance - otherwise\nit'll get mangled by grunt's option API.\n\n#### files.gzip\nType: `Boolean`\n\nPass this to a files object to enable gzip compression, e.g.\n\n``` javascript\n{\n  root: __dirname\n  src: '/**/*.html',\n  dest: '/',\n  gzip: true\n}\n```\n\n#### files.compressionLevel\nType: `Number`\n\nThis argument will set compression to the desired level. The default is 6 and the maximum you can set is 9. This is only useful if `gzip: true`. You can find more about this [here](http://zlib.net/manual.html#Advanced).\n\n#### files.root\nType: `String`\n\nThis is a mandatory argument. Pass this to a files object to determine the \"root\" directory for uploads, e.g.\nthe following will upload the files in `build` to the bucket's root:\n\nThe purpose is to determine the base path of the files so that relative paths from that base path `root` can be preserved when uploaded to S3. Without it, we don't know relative to what to make the paths on S3.\n\n``` javascript\n{\n  root: __dirname + 'build'\n  src: 'build/**'\n  dest: '/'\n}\n```\n\n#### Note\nThe project is based on [knox](http://ghub.io/knox), all knox options are available in the\n`options` object.\n\n### Usage Examples\n\nTemplate strings in grunt will allow you to easily include values from other files. The below example\ndemonstrates loading aws settings from another file, Where grunt-aws.json is just a json key:value file like package.json. (Special thanks to @nanek) This is **important because you should never check in your S3 credentials to github! Load them from an external file that is outside of the repo.**\n\n```js\ngrunt.initConfig({\n  aws: grunt.file.readJSON('~/grunt-aws.json'),\n  's3-sync': {\n    options: {\n        key: '<%= aws.key %>'\n      , secret: '<%= aws.secret %>'\n      , bucket: '<%= aws.bucket %>'\n      , db    : db\n    },\n    your_target: {\n        files: [\n            {\n                root: __dirname\n              , src:  'tasks/**/*.js'\n              , dest: 'js/'\n              , gzip: true\n            },\n            {\n                root: 'dist'\n              , src: ['dist/**', '!dist/img/**']  // Don't compress images!\n              , dest: '/<%= pkg.version %>/'\n              , gzip: true\n              , compressionLevel: 9  // Max compression\n            },\n            {\n                root: __dirname\n              , src:  'Gruntfile.js'\n              , dest: 'Gruntfile.js'\n            }\n        ]\n    },\n  },\n})\n```\n\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style.\n\n## Release History\n* 2013-08-07   v0.2.1   New s3-sync version\n* 2013-07-25   v0.1.1   Edit gzipping handling\n* 2013-07-25   v0.1.0   First release\n",
  "readmeFilename": "README.md",
  "_id": "grunt-s3-sync@0.4.1",
  "_from": "grunt-s3-sync@~0.4.1"
}
